---
title: "Chapter 3 Seeking Help"
format: html
editor: visual
author: "Zee Al Ahmad"
---

## **Reading Help Files**

R, and every package, provide help files for functions. The general syntax to search for help on any function, “function_name”, from a specific function that is in a package loaded into your namespace (your interactive R session) is:

```{r}
?function_name
help(function_name)
```

For example take a look at the help file for `write.table()`, we will be using a similar function in an upcoming episode.

```{r}
?write.table()
```

When you load a help page in RStudio or in R, it provides comprehensive information about functions, broken down into specific sections to make it easier to understand how to use them and what to expect.

-   **Description**: This section offers an extended overview of the function's purpose and functionality. It gives you a clear idea of what the function is designed to do.

-   **Usage**: Here, you'll find the syntax of the function, including all arguments and their default values. This section is crucial for understanding how to call the function and what options you can customize.

-   **Arguments**: This part details each argument of the function, explaining the type of data it expects. Understanding this section helps ensure you provide the correct inputs to the function.

-   **Details**: If there are any important nuances or additional information you need to know about the function, they will be outlined here. This could include specifics about the function's implementation or behavior under certain conditions.

-   **Value**: This section describes the output of the function, clarifying what type of data the function returns after execution. Knowing this is essential for effectively using the function's output in your analysis.

-   **See Also**: References to related functions or resources are provided here. This can be helpful for discovering alternative or complementary functions.

-   **Examples**: Practical examples showing how to use the function are included in this section. These examples can be particularly useful for learning how to apply the function to real-world data and for troubleshooting issues by comparing your code to working examples.

```{r}
?write.table()
?write.csv()
```

This is because these functions have very similar applicability and often share the same arguments as inputs to the function, so package authors often choose to document them together in a single help file.

### TIP: RUNNING EXAMPLES

From within the function help page, you can highlight code in the Examples and hit Ctrl+Return to run it in RStudio console. This gives you a quick way to get a feel for how a function works.

### TIP: READING HELP FILES

One of the most daunting aspects of R is the large number of functions available. It would be prohibitive, if not impossible to remember the correct usage for every function you use. Luckily, using the help files means you don’t have to remember that!

## Special Operators

To seek help on special operators, use quotes or backticks:

```         
?"<-" ?`<-`
```

## Getting help with packages

Vignettes in R are detailed tutorials and documentation for packages, providing in-depth examples and guidance. They can be listed for all installed packages or specifically by package name. Directly accessing a particular vignette is also possible. For packages without vignettes, the `help()` function offers documentation. Additionally, RStudio offers concise cheatsheets for many packages, serving as quick-reference guides. These resources are invaluable for learning and effectively using R packages, catering to both new and experienced users.

## When you remember part of the function

```{r}
??function_name
```

A fuzzy search is when you search for an approximate string match. For example, you may remember that the function to set your working directory includes “set” in its name. You can do a fuzzy search to help you identify the function:

```{r}
??set
```

## when you have no idea where to begin

If you don’t know what function or package you need to use [CRAN Task Views](https://cran.at.r-project.org/web/views) is a specially maintained list of packages grouped into fields. This can be a good starting point.

## when your code doesn't work: seek help from peers

If you cant find the answer, there are few useful functions:

```{r}
?dput
```

Will dump the data you’re working with into a format that can be copied and pasted by others into their own R session.undefined

```{r}
sessionInfo()
```
